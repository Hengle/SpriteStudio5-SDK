//pngの表示にArtlet2Dを使用しています。	
#include "a2d.hsp"

/**
	Sprite Studio 5 で作成したアニメーションをHSPで再生するサンプルプログラムです。
	
	■使用方法
	SpriteStudio5-SDK(https://github.com/SpriteStudio/SpriteStudio5-SDK)に含まれる
	Ss5Converterを使用してsspjからsspbを作成します。
	
	作成したssbpと画像ファイルをゲームのリソースフォルダに置きSS5PlayerDllを使用して読み込みます。
	SS5PlayerDllからアニメーションのステータスを取得してHSP側で表示を行います。
	
	SS5PlayerDllの関数リファレンスは付属のredme.txtを参照してください。
	
	※サンプルプログラムの制限
	未対応アトリビュート
	　X回転、Y回転、カラーブレンド、頂点変形、Xサイズ(出力しているがサンプルプログラムが未対応)、Yサイズ(出力しているがサンプルプログラムが未対応)
	　UXX移動、UVY移動、UV回転、UXXスケール、UVYスケール、ユーザーデータ、インスタンスアニメ
	サンプルではパーツのブレンド方法には対応していません。
	データは出力しているので、必要であれば各自対応してください。

	サンプルでは32bitのpngを使用していますが、16bit等の画像を使用しHSPの標準命令で表示すれば動作速度は格段に早くなると思います。
	必要に応じてステータスから表示部を作成してください。
*/

//---------------------------------------------------------------------------------------------
// SS5PlayerDllの定義
//---------------------------------------------------------------------------------------------
#uselib "SS5PlayerDll.dll"
#cfunc SSPlayer_initlize			"SSPlayer_initlize"
#cfunc SSPlayer_setFps				"SSPlayer_setFps"				int 
#cfunc SSPlayer_addData				"SSPlayer_addData"				str 
#cfunc SSPlayer_getPlayerNum		"SSPlayer_getPlayerNum"		 
#cfunc SSPlayer_get_texureIndex		"SSPlayer_get_texureIndex" 		int
#cfunc SSPlayer_get_texureName		"SSPlayer_get_texureName"		int,sptr
#cfunc SSPlayer_play				"SSPlayer_play"					int,str,str 
#cfunc SSPlayer_update				"SSPlayer_update"			 
#cfunc SSPlayer_get_partNum			"SSPlayer_get_partNum"			int 
#cfunc SSPlayer_get_partStatus		"SSPlayer_get_partStatus"		int,int,var 
#cfunc SSPlayer_setPosition			"SSPlayer_setPosition"			int,int,int 
#cfunc SSPlayer_setRotation			"SSPlayer_setRotation"			int,double,double,double 
#cfunc SSPlayer_setScale			"SSPlayer_setScale"				int,double,double 
#cfunc SSPlayer_setAlpha			"SSPlayer_setAlpha"				int,int 
#cfunc SSPlayer_setFlip				"SSPlayer_setFlip"				int,int,int 
#cfunc SSPlayer_pause				"SSPlayer_pause"				int 
#cfunc SSPlayer_resume				"SSPlayer_resume"				int 
#cfunc SSPlayer_setFrameNo			"SSPlayer_setFrameNo"			int,int 
#cfunc SSPlayer_getMaxFrame			"SSPlayer_getMaxFrame"			int 
#cfunc SSPlayer_getFrameNo			"SSPlayer_getFrameNo"			int 
#cfunc SSPlayer_get_namePartStatus	"SSPlayer_get_namePartStatus"	int,str,int,var 
#cfunc SSPlayer_Delete				"SSPlayer_Delete"				 

//---------------------------------------------------------------------------------------------
// プレイヤーの定義
//---------------------------------------------------------------------------------------------
#define SS5PLAYER_MAX 		(8)		//HSP側で使用するプレイヤーの数
#define SS5PLAYER_IMAGE_MAX (10)	//プレイヤーが使用するテクスチャの枚数
#define SS5PLAYER_BUFFOFS 	(10)	//プレイヤーが画像を読み込むバッファのオフセット（ゲーム側で使用するバッファ分後ろにずらす）
#define SS5PLAYER_ROTBUFF 	(9)		//回転処理に使用する一時領域
#define SCREEN_X			(640)	//画面サイズ
#define SCREEN_Y			(480)	//画面サイズ

//---------------------------------------------------------------------------------------------
// 初期化
//---------------------------------------------------------------------------------------------
//画面の初期化
screen 0, SCREEN_X, SCREEN_Y
// GDI+ を使用することができなかった場合は、システム変数 stat に -1 が返ります。
if stat = -1 : dialog "GDI+ を初期化できませんでした。" : end

//SSプレイヤーの初期化
ret = SSPlayer_initlize( )
//FPS設定
ret = SSPlayer_setFps( 60 )
//ssbpの読み込み
ret = SSPlayer_addData( "Resources\\character_template_comipo\\character_template1.ssbp" )

//画像リソース読み込み
dim texid, SS5PLAYER_IMAGE_MAX		    //テクスチャハンドル
sdim texname, 260, SS5PLAYER_IMAGE_MAX	//テクスチャ名
for i,0,SS5PLAYER_IMAGE_MAX,1
	texid(i) = SSPlayer_get_texureIndex( i )
	ret = SSPlayer_get_texureName( i, varptr(texname(i)) )

	if ( texid(i) != -1 ) {
		//画像読み込み
		alCreateImageByFile texid(i) + SS5PLAYER_BUFFOFS, texname(i)
	}
//	dialog "texid"+texid(i)+" texname : "+texname(i)+"\n"	//確認用
next

//SS5Playerの作成
//プレイヤー0でアニメを再生する
ret = SSPlayer_play( 0, "character_template1", "character_template_3head/stance" )
//位置設定
ret = SSPlayer_setPosition( 0, SCREEN_X / 2, SCREEN_Y / 2 ) 
//スケール設定
ret = SSPlayer_setScale( 0, double(1.0), double(1.0) ) 
//反転設定
ret = SSPlayer_setFlip( 0, 0, 0 ) 
//回転設定、X回転、Y回転は未対応
ret = SSPlayer_setRotation( 0, 0, 0, 0 )
//透明度設定
ret = SSPlayer_setAlpha( 0, 255 )

//カレントウィンドウ設定
gsel 0            	
dim partstate, 18 	//パーツステータスを受け取るためのバッファ

//---------------------------------------------------------------------------------------------
// メインループ
//---------------------------------------------------------------------------------------------
repeat
	//プレイヤーの更新
	ret = SSPlayer_update( )
	
	//画面更新を無効
	redraw 0		
	//画面を初期化
	color 216,233,236:boxf	
	
	for i,0,SS5PLAYER_MAX,1
		//SS5プレイヤーの情報を取得してアニメを表示
		partnum = SSPlayer_get_partNum( i )
		if (partnum != 0 ){
			//表示パーツあり、パーツ数の取得
			for j,0,partnum,1
				//各パーツのステータスを取得
				ret = SSPlayer_get_partStatus(i, j, partstate)
//				dialog "partnum=" + i+  " 1="+partstate(0)+" 2="+partstate(1)+"\n"	//確認用
	
				if ( partstate(0) != -1){
					//描画
					ss_texid = partstate(0) + SS5PLAYER_BUFFOFS		//テクスチャID
					ss_visble = partstate(1)		//表示フラグ
					if ( ss_visble != 0 ){
						ss_x = partstate(2)			//表示位置X
						ss_y = partstate(3)			//表示位置Y
						ss_sx = partstate(4)		//テクスチャ内のセル左上開始位置X
						ss_sy = partstate(5)		//テクスチャ内のセル左上開始位置Y
						ss_w = partstate(6)			//テクスチャ内のセル幅
						ss_h = partstate(7)			//テクスチャ内のセル高さ
						ss_zoomx = double(partstate(8)) / double(100.0)	//100倍にスケーリングされています
						ss_zoomy = double(partstate(9)) / double(100.0)	//100倍にスケーリングされています
						ss_dstw = double(ss_w) * double( ss_zoomx )
						ss_dsth = double(ss_h) * double( ss_zoomy )
						ss_rot = partstate(10)		//角度
						ss_alpha = partstate(11)	//透明度
						ss_blend = partstate(12)	//ブレンド方法
						ss_flipx = partstate(13)	//X反転プラグ
						ss_flipy = partstate(14)	//Y反転フラグ
						ss_sizex = partstate(15)	//Xサイズ
						ss_sizey = partstate(16)	//Yサイズ
						ss_boundingRadius = partstate(17)	//当たり半径
						//アルファを設定
						alCopyModeAlpha ( double( ss_alpha ) / double( 255.0 ) )
		
						//矩形転送
						//回転は仮想バッファに回転コピーして、HSPのスクリーンへコピーを行う
						//仮想バッファは回転時にはみ出した部分が切れないように2倍のサイズで作っておく
						ss_tmpbuf_sizex = ss_w
						ss_tmpbuf_sizey = ss_w
						if ( ss_h > ss_w ){
							ss_tmpbuf_sizex = ss_h
							ss_tmpbuf_sizey = ss_h
						}
	
						if ( ss_flipx + ss_flipy == 1 ){
							//横か縦のどちらかのみ反転する場合は角度を逆にする
							//DLLから取得した時にはすでに角度が逆になっているが、反転時にはスケールが-になるため、逆角度と逆スケールで反転なしの状態なってしまう。
							ss_rot = -ss_rot
						}

						alCreateImage SS5PLAYER_ROTBUFF, ss_tmpbuf_sizex * 2, ss_tmpbuf_sizey * 2		//回転用のスクリーンを用意
						alTransModeRotateAt ss_rot, ss_tmpbuf_sizex, ss_tmpbuf_sizey					//回転値を設定（0〜360度）
						//回転値を反映させて仮想バッファへコピー
						alCopyImageToImage ss_texid, SS5PLAYER_ROTBUFF, ss_tmpbuf_sizex - ( ss_w / 2 ), ss_tmpbuf_sizey - ( ss_h / 2 ), ss_w, ss_h, ss_sx, ss_sy	
						//拡大を反映させてHSPのスクリーンへコピー
						ss_tmpbuf_zoomx = (double(ss_tmpbuf_sizex * 2) * double( ss_zoomx ))
						ss_tmpbuf_zoomy = (double(ss_tmpbuf_sizey * 2) * double( ss_zoomy ))
	
						ss_tmp_sx = ss_x - ( ss_tmpbuf_zoomx / double(2) )
						ss_tmp_sy = ss_y - ( ss_tmpbuf_zoomy / double(2) )
						ss_tmp_w = ss_tmpbuf_zoomx
						ss_tmp_h = ss_tmpbuf_zoomy
//						dialog "ss_flipx=" + ss_flipx+  " ss_flipy="+ss_flipy+"\n"	//確認用
						alStretchImageToScreen SS5PLAYER_ROTBUFF, 0, 0, 0, ss_tmpbuf_sizex * 2, ss_tmpbuf_sizey * 2, ss_tmp_sx, ss_tmp_sy, ss_tmp_w, ss_tmp_h	
					}
				}

			next
		}
	next
	
	//-----------------------
	// キー入力
	//-----------------------
	getkey zkey,90	//Zキーで操作
	getkey lkey,37	//左キーで操作
	getkey ukey,38	//上キーで操作
	getkey rkey,39	//右キーで操作
	getkey dkey,40	//下キーで操作
	//zキーでポーズのON,OFFを行う
	if ( zkey == 1 ){
		if ( key_press == 0 ) {
	
			for i,0,SS5PLAYER_MAX,1
				if ( anime_pause == 0 ){
					ret = SSPlayer_pause( i )	//ポーズをかける
				}else{
					ret = SSPlayer_resume( i )	//ポーズを解除
				}
			next
			
			if ( anime_pause == 0 ){
				anime_pause = 1
			}else{
				anime_pause = 0
			}
		}
		key_press = 1
	} 
	//矢印キーでアニメのフレームを操作する
	anime_maxframe = SSPlayer_getMaxFrame(0)	//0番のプレイヤーからアニメの総フレームを取得
	if ( lkey == 1 ){
		if ( key_press == 0 ) {
			anime_frame -= 1
		}
		key_press = 1
	}
	if ( rkey == 1 ){
		if ( key_press == 0 ) {
			anime_frame += 1
		}
		key_press = 1
	}
	if ( ukey == 1 ){
		if ( key_press == 0 ) {
			anime_frame += 10
		}
		key_press = 1
	}
	if ( dkey == 1 ){
		if ( key_press == 0 ) {
			anime_frame -= 10
		}
		key_press = 1
	}
	if ( ( zkey == 0 ) && ( lkey == 0 ) && ( rkey == 0 ) && ( ukey == 0 ) && ( dkey == 0 ) ) {
		key_press = 0
	}
	//アニメのフレームが範囲外の場合はループさせる。
	if ( anime_frame < 0 ){
		anime_frame += anime_maxframe
	}
	if ( anime_frame >= anime_maxframe ){
		anime_frame -= anime_maxframe
	}
	//ポーズの場合はアニメのフレーム設定
	if ( anime_pause == 1 ){
		ret = SSPlayer_setFrameNo( 0, anime_frame )
		color 255, 0, 0
		pos 8, 8
		mes "pause:frame=" + anime_frame + " maxframe=" + anime_maxframe
	}else{
		anime_frame = SSPlayer_getFrameNo(0)	//0番のプレイヤーから再生フレームを取得
		color 255, 0, 0
		pos 8, 8
		mes "play:frame=" + anime_frame + " maxframe=" + anime_maxframe
	}
	
	//パーツ名からパーツステータスの取得
	partname = "object1"
	ret = SSPlayer_get_namePartStatus( 0, partname , -1, partstate )
	ss_texid = partstate(0)		//テクスチャID
	ss_visble = partstate(1)	//表示フラグ
	ss_x = partstate(2)			//表示位置X
	ss_y = partstate(3)			//表示位置Y
	ss_sx = partstate(4)		//テクスチャ内のセル左上開始位置X
	ss_sy = partstate(5)		//テクスチャ内のセル左上開始位置Y
	ss_w = partstate(6)			//テクスチャ内のセル幅
	ss_h = partstate(7)			//テクスチャ内のセル高さ
	ss_zoomx = double(partstate(8)) / double(100.0)	//100倍にスケーリングされています
	ss_zoomy = double(partstate(9)) / double(100.0)	//100倍にスケーリングされています
	ss_rot = partstate(10)		//角度
	ss_alpha = partstate(11)	//透明度
	ss_blend = partstate(12)	//ブレンド方法
	ss_flipx = partstate(13)	//X反転プラグ
	ss_flipy = partstate(14)	//Y反転フラグ
	ss_sizex = partstate(15)	//Xサイズ
	ss_sizey = partstate(16)	//Yサイズ
	ss_boundingRadius = partstate(17)	//当たり半径	
	color 255, 0, 0
	pos 8, 24
	mes "partname=" + partname + " partstat:x=" + ss_x + " y=" + ss_y
	
	//escキーで終了
	getkey esckey,27
	if ( esckey == 1 ){
		break
	}

	redraw 1			//画面更新を有効にする
	await 16


loop

//---------------------------------------------------------------------------------------------
// 終了処理
//---------------------------------------------------------------------------------------------
//HSPで読み込んだイメージの削除
alDeleteAll
//SS5Playerの削除
ret = SSPlayer_Delete()

end




